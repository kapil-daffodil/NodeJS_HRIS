/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 8/2/13
 * Time: 2:30 PM
 * To change this template use File | Settings | File Templates.
 */

var http = require('http');
var urlParser = require('url');
var BaasError = require("apputil/ApplaneError.js");
var ApplaneCallback = require("apputil/ApplaneCallback.js");
var jsonResponseType = {"Content Type":"application/json", "Access-Control-Allow-Origin":"*", "Access-Control-Allow-Methods":"GET, POST, OPTIONS"};
var NodeJSApi = require("nodejsapi");

var ErrorCode = new function () {
    this.UNKNOWN_ERROR = {code:17, message:"Unknown error took place."};
}

exports.handleRequest = function (req, res, loadModule) {
    try {
        var url = urlParser.parse(req.url, true);
        var path = url.pathname;
        if (path == "/module" || path == "/job" || path == "/service") {
            var params = req.param("parameters") ? JSON.parse(req.param("parameters")) : {};
            params.ask = req.param("ask");
            params.osk = req.param("osk");
            params.usk = req.param("usk");
            params.user = params.usk ? JSON.parse(req.param("user")) : null;


            var module = req.param("module");
            var method = req.param("method");
            var moduleObject = loadModule(module, req.param("appid"));

            if (path == "/service") {
                params.response = res;
                moduleObject[method](params);
            } else {
                moduleObject[method](params, ApplaneCallback(function (err) {
                    writeJSONResponse(res, err);
                }, function (result) {
                    if (path == "/job") {
                        result = params;
                    }
                    writeJSONResponse(res, result);
                }));
            }
        }
    } catch (err) {
        writeJSONResponse(res, err);
    }
}

function writeJSONResponse(res, result) {
    if (result instanceof BaasError) {
        res.writeHead(417, jsonResponseType);
        res.write(JSON.stringify({response:result.message, status:"error", code:result.code, stack:result.stack}));
    } else if (result instanceof Error) {
        res.writeHead(417, jsonResponseType);
        res.write(JSON.stringify({response:ErrorCode.UNKNOWN_ERROR.message, status:"error", code:ErrorCode.UNKNOWN_ERROR.code, stack:result.stack}));
    } else {
        res.writeHead(200, jsonResponseType);
        res.write(JSON.stringify({response:result, status:"ok", code:200}));
    }
    res.end();
}